#
# @lc app=leetcode.cn id=416 lang=python3
#
# [416] 分割等和子集
#

# @lc code=start
from functools import lru_cache
class Solution:
    def canPartition(self, nums: [int]) -> bool:
        sum_nums = sum(nums)
        if sum_nums&1:
            return False
        half_sum = sum_nums//2

        if max(nums) > half_sum:
            return False
        if max(nums) == half_sum:
            return True

        n = len(nums)
        @lru_cache(None)
        def dfs(k: int, i: int) -> bool:
            if k==0:
                return i==0
            if i<0:
                return False
            return dfs(k-1, i-nums[k-1]) or dfs(k-1, i)
        return dfs(n, half_sum)
# @lc code=end

s = Solution()
s.canPartition(
    # [2,2,3,5]

)