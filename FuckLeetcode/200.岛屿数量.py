#
# @lc app=leetcode.cn id=200 lang=python3
#
# [200] 岛屿数量
#

# @lc code=start
from queue import Queue
class Solution:
    def numIslands(self, grid: [[str]]) -> int:
        row = len(grid)
        col = len(grid[0])
        ones = set()
        for r in range(row):
            for c in range(col):
                grid[r][c] = ord(grid[r][c])-ord('0')
                if grid[r][c]:
                    ones.add((r,c))
        
        dr = [0,0,1,-1]
        dc = [1,-1,0,0]
        def bfs(r, c, k):
            q = Queue()
            q.put((r, c))
            grid[r][c] = k
            while not q.empty():
                r, c = q.get()
                for i in range(4):
                    nr = r+dr[i]
                    nc = c+dc[i]
                    if nr>=0 and nr<row and nc>=0 and nc < col \
                        and grid[nr][nc]==1:
                        grid[nr][nc] = k
                        q.put((nr, nc))
        k = 2
        for r,c in ones:
            if grid[r][c] == 1:
                bfs(r, c, k)
                k += 1
                # for t in grid:
                #     print(t)
                # print()
        return k-2
# @lc code=end

s = Solution()
res = s.numIslands(
    [
        ["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
        ["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
        ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
        ["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
        ["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]
    ]
# [
#   ["1","1","0","0","0"],
#   ["1","1","0","0","0"],
#   ["0","0","1","0","0"],
#   ["0","0","0","1","1"]
# ]


)

print(res)