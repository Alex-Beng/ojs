#
# @lc app=leetcode.cn id=282 lang=python3
#
# [282] 给表达式添加运算符
#

# @lc code=start
from functools import lru_cache
class Solution:
    def addOperators(self, num: str, target: int) -> [str]:
        @lru_cache(None)
        def is_num(c: str) -> bool:
            return ord('0') <= ord(c) <= ord('9')

        def compute(n1, n2, op) -> int:
            if op == '*':
                return n1*n2
            elif op == '+':
                return n1+n2
            elif op == '-':
                return n1-n2
        
        def compute_expr(expr: str) -> int:
            n = len(expr)
            i = 0
            mod_expr = []
            while i<n:
                j = i
                tn = ''
                while j<n and is_num(expr[j]):
                    tn += expr[j]
                    j += 1
                if tn[0]=='0' and int(tn)!=0 or int(tn)==0 and len(tn)>1:
                    return float('inf')
                mod_expr.append(int(tn))
                if j!=n:
                    mod_expr.append(expr[j])
                    j += 1
                i = j
            num_sk = []
            op_sk = []
            op2prior = {'+':1, '-':1, '*':2}
            for e in mod_expr:
                if isinstance(e, int):
                    num_sk.append(e)
                else:
                    while len(op_sk) and op2prior[e] < op2prior[op_sk[-1]]:
                        op = op_sk.pop()
                        n2 = num_sk.pop()
                        n1 = num_sk.pop()
                        t = compute(n1, n2, op)
                        num_sk.append(t)
                    op_sk.append(e)
            # print(num_sk, op_sk)
            while len(op_sk) and op_sk[-1]=='*':
                op = op_sk.pop()
                n2 = num_sk.pop()
                n1 = num_sk.pop()
                t = compute(n1, n2, op)
                num_sk.append(t)
            # print(num_sk, op_sk)
            n_cnt = 0
            for op in op_sk:
                n1 = num_sk[n_cnt]
                n2 = num_sk[n_cnt+1]
                n_cnt += 1
                num_sk[n_cnt] = compute(n1, n2, op)
            return num_sk[n_cnt]

        ans = []
        ops = ['-', '+', '*']
        def dfs(layer: int, expr: [str]):
            if layer==len(expr):
                if compute_expr(expr) == target:
                    ans.append(''.join(expr))
                return

            dfs(layer+1, expr)

            for op in ops:
                expr.insert(layer, op)
                dfs(layer+2, expr)
                del expr[layer]
        dfs(1, list(num))
        # r = compute_expr("2+3*2")
        # print(r)
        return ans

# @lc code=end
s = Solution()
r = s.addOperators(
    # "00", 0
    # "3456237490", 9191
    # "123456789", 45
    "232", 8
)
# r.sort()
# a = ["1*2*3*4*5-6-78+9","1*2*3*4+5+6-7+8+9","1*2*3+4+5+6+7+8+9","1*2*3+4+5-6*7+8*9","1*2*3+4-5*6+7*8+9","1*2*3+4-5*6-7+8*9","1*2*3-4*5+6*7+8+9","1*2*3-4*5-6+7*8+9","1*2*3-4*5-6-7+8*9","1*2*3-45+67+8+9","1*2*34+56-7-8*9","1*2*34-5+6-7-8-9","1*2+3*4-56+78+9","1*2+3+4+5*6+7+8-9","1*2+3+4-5+6*7+8-9","1*2+3+4-5-6+7*8-9","1*2+3+45+67-8*9","1*2+3-45+6+7+8*9","1*2+34+5-6-7+8+9","1*2+34+56-7*8+9","1*2+34-5+6+7-8+9","1*2+34-56+7*8+9","1*2+34-56-7+8*9","1*2-3*4+5+67-8-9","1*2-3+4-5-6*7+89","1*2-3-4*5+67+8-9","1*2-3-4+56-7-8+9","1*2-34+5*6+7*8-9","1*23+4*5-6+7-8+9","1*23-4-56-7+89","1+2*3*4*5+6+7-89","1+2*3*4+5*6+7-8-9","1+2*3*4-5+6*7-8-9","1+2*3+4*5*6+7-89","1+2*3+4*5-6+7+8+9","1+2*3-4-5-6*7+89","1+2*34-5*6+7+8-9","1+2+3*4*5+6-7-8-9","1+2+3*4+5+6*7-8-9","1+2+3*45-6-78-9","1+2+3+4+5+6+7+8+9","1+2+3+4+5-6*7+8*9","1+2+3+4-5*6+7*8+9","1+2+3+4-5*6-7+8*9","1+2+3-4*5+6*7+8+9","1+2+3-4*5-6+7*8+9","1+2+3-4*5-6-7+8*9","1+2+3-45+67+8+9","1+2-3*4*5+6+7+89","1+2-3*4+5*6+7+8+9","1+2-3*4-5+6*7+8+9","1+2-3*4-5-6+7*8+9","1+2-3*4-5-6-7+8*9","1+2-3+4*5+6*7-8-9","1+2-3+45+6-7-8+9","1+2-3+45-6+7+8-9","1+2-3-4-5*6+7+8*9","1+2-3-45-6+7+89","1+2-34+5+6+7*8+9","1+2-34+5+6-7+8*9","1+2-34-5-6+78+9","1+23*4+5-6-7*8+9","1+23*4-5-6*7+8-9","1+23*4-56+7-8+9","1+23+4+5+6+7+8-9","1+23+4-5*6+7*8-9","1+23+4-5-67+89","1+23-4*5+6*7+8-9","1+23-4*5-6+7*8-9","1+23-4-5+6+7+8+9","1+23-4-5-6*7+8*9","1+23-45+67+8-9","1-2*3*4+5-6+78-9","1-2*3*4-5-6+7+8*9","1-2*3+4*5+6+7+8+9","1-2*3+4*5-6*7+8*9","1-2*3+4+5+6*7+8-9","1-2*3+4+5-6+7*8-9","1-2*3+4+56+7-8-9","1-2*3+45-67+8*9","1-2*3-4+5*6+7+8+9","1-2*3-4-5+6*7+8+9","1-2*3-4-5-6+7*8+9","1-2*3-4-5-6-7+8*9","1-2*34+5*6-7+89","1-2+3*4*5-6-7+8-9","1-2+3+4-5*6+78-9","1-2+3+45+6-7+8-9","1-2+3-4*5-6+78-9","1-2+3-45+6-7+89","1-2-3*4+5+6+7*8-9","1-2-3*4-5-6+78-9","1-2-3+4-5+67-8-9","1-2-3+45-6-7+8+9","1-2-34+5+6+78-9","1-2-34+56+7+8+9","1-2-34-5+6+7+8*9","1-23*4+5+6*7+89","1-23+4*5-6*7+89","1-23+4-5+67-8+9","1-23+45-67+89","1-23-4+5+67+8-9","1-23-4-5-6-7+89","12*3*4-5*6-78+9","12*3+4+5+6-7-8+9","12*3+4+5-6+7+8-9","12*3-4-5-6+7+8+9","12*3-4-56+78-9","12+3*4+5+6-7+8+9","12+3*45-6-7-89","12+3+4-56-7+89","12+3-4*5+67-8-9","12+3-45+6+78-9","12+34-5-6-7+8+9","12-3*4*5+6+78+9","12-3*4-5+67-8-9","12-3+4*5+6-7+8+9","12-3+4+56-7-8-9","12-3-4+5*6-7+8+9","12-3-4-56+7+89","12-3-45-6+78+9"]
# a.sort()
# print(''.join(r))
# print(''.join(a))
print(r)